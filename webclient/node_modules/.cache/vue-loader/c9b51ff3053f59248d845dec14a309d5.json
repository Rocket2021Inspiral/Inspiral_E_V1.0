{"remainingRequest":"F:\\javascript\\inspiral-lance1\\inspiral-lance1\\webclient\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!F:\\javascript\\inspiral-lance1\\inspiral-lance1\\webclient\\src\\views\\Search.vue?vue&type=template&id=1a1d373c&scoped=true&","dependencies":[{"path":"F:\\javascript\\inspiral-lance1\\inspiral-lance1\\webclient\\src\\views\\Search.vue","mtime":1616071876503},{"path":"F:\\javascript\\inspiral-lance1\\inspiral-lance1\\webclient\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\javascript\\inspiral-lance1\\inspiral-lance1\\webclient\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"F:\\javascript\\inspiral-lance1\\inspiral-lance1\\webclient\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\javascript\\inspiral-lance1\\inspiral-lance1\\webclient\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}